/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nfsdb.journal.test.model;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.nio.ByteBuffer;
import java.util.*;

public class Band implements org.apache.thrift.TBase<Band, Band._Fields>, java.io.Serializable, Cloneable {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Band.class, metaDataMap);
    }

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Band");
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new BandStandardSchemeFactory());
        schemes.put(TupleScheme.class, new BandTupleSchemeFactory());
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    public long timestamp; // required
    public String name; // required
    public String url; // required
    public String type; // required
    public ByteBuffer image; // required
    private byte __isset_bitfield = 0;

    public Band() {
    }

    public Band(
            long timestamp,
            String name,
            String url,
            String type,
            ByteBuffer image) {
        this();
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.name = name;
        this.url = url;
        this.type = type;
        this.image = image;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Band(Band other) {
        __isset_bitfield = other.__isset_bitfield;
        this.timestamp = other.timestamp;
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetUrl()) {
            this.url = other.url;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
        if (other.isSetImage()) {
            this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
            ;
        }
    }

    public Band deepCopy() {
        return new Band(this);
    }

    @Override
    public void clear() {
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.name = null;
        this.url = null;
        this.type = null;
        this.image = null;
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public Band setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /**
     * Returns true if field timestamp is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTimestamp() {
        return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public String getName() {
        return this.name;
    }

    public Band setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /**
     * Returns true if field name is set (has been assigned a value) and false otherwise
     */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public String getUrl() {
        return this.url;
    }

    public Band setUrl(String url) {
        this.url = url;
        return this;
    }

    public void unsetUrl() {
        this.url = null;
    }

    /**
     * Returns true if field url is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUrl() {
        return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
        if (!value) {
            this.url = null;
        }
    }

    public String getType() {
        return this.type;
    }

    public Band setType(String type) {
        this.type = type;
        return this;
    }

    public void unsetType() {
        this.type = null;
    }

    /**
     * Returns true if field type is set (has been assigned a value) and false otherwise
     */
    public boolean isSetType() {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    public byte[] getImage() {
        setImage(org.apache.thrift.TBaseHelper.rightSize(image));
        return image == null ? null : image.array();
    }

    public ByteBuffer bufferForImage() {
        return image;
    }

    public Band setImage(byte[] image) {
        setImage(image == null ? (ByteBuffer) null : ByteBuffer.wrap(image));
        return this;
    }

    public Band setImage(ByteBuffer image) {
        this.image = image;
        return this;
    }

    public void unsetImage() {
        this.image = null;
    }

    /**
     * Returns true if field image is set (has been assigned a value) and false otherwise
     */
    public boolean isSetImage() {
        return this.image != null;
    }

    public void setImageIsSet(boolean value) {
        if (!value) {
            this.image = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;

            case URL:
                if (value == null) {
                    unsetUrl();
                } else {
                    setUrl((String) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                } else {
                    setType((String) value);
                }
                break;

            case IMAGE:
                if (value == null) {
                    unsetImage();
                } else {
                    setImage((ByteBuffer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TIMESTAMP:
                return Long.valueOf(getTimestamp());

            case NAME:
                return getName();

            case URL:
                return getUrl();

            case TYPE:
                return getType();

            case IMAGE:
                return getImage();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TIMESTAMP:
                return isSetTimestamp();
            case NAME:
                return isSetName();
            case URL:
                return isSetUrl();
            case TYPE:
                return isSetType();
            case IMAGE:
                return isSetImage();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Band)
            return this.equals((Band) that);
        return false;
    }

    public boolean equals(Band that) {
        if (that == null)
            return false;

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_url = true && this.isSetUrl();
        boolean that_present_url = true && that.isSetUrl();
        if (this_present_url || that_present_url) {
            if (!(this_present_url && that_present_url))
                return false;
            if (!this.url.equals(that.url))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        boolean this_present_image = true && this.isSetImage();
        boolean that_present_image = true && that.isSetImage();
        if (this_present_image || that_present_image) {
            if (!(this_present_image && that_present_image))
                return false;
            if (!this.image.equals(that.image))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();

        boolean present_timestamp = true;
        builder.append(present_timestamp);
        if (present_timestamp)
            builder.append(timestamp);

        boolean present_name = true && (isSetName());
        builder.append(present_name);
        if (present_name)
            builder.append(name);

        boolean present_url = true && (isSetUrl());
        builder.append(present_url);
        if (present_url)
            builder.append(url);

        boolean present_type = true && (isSetType());
        builder.append(present_type);
        if (present_type)
            builder.append(type);

        boolean present_image = true && (isSetImage());
        builder.append(present_image);
        if (present_image)
            builder.append(image);

        return builder.toHashCode();
    }

    public int compareTo(Band other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Band typedOther = (Band) other;

        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetImage()).compareTo(typedOther.isSetImage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetImage()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, typedOther.image);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Band(");
        boolean first = true;

        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("url:");
        if (this.url == null) {
            sb.append("null");
        } else {
            sb.append(this.url);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        } else {
            sb.append(this.type);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("image:");
        if (this.image == null) {
            sb.append("null");
        } else {
            org.apache.thrift.TBaseHelper.toString(this.image, sb);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
        if (name == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
        }
        if (url == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());
        }
        if (type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
        }
        if (image == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'image' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TIMESTAMP((short) 1, "timestamp"),
        NAME((short) 2, "name"),
        URL((short) 3, "url"),
        TYPE((short) 4, "type"),
        IMAGE((short) 5, "image");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TIMESTAMP
                    return TIMESTAMP;
                case 2: // NAME
                    return NAME;
                case 3: // URL
                    return URL;
                case 4: // TYPE
                    return TYPE;
                case 5: // IMAGE
                    return IMAGE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }
    }

    private static class BandStandardSchemeFactory implements SchemeFactory {
        public BandStandardScheme getScheme() {
            return new BandStandardScheme();
        }
    }

    private static class BandStandardScheme extends StandardScheme<Band> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Band struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // URL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.url = iprot.readString();
                            struct.setUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.type = iprot.readString();
                            struct.setTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // IMAGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.image = iprot.readBinary();
                            struct.setImageIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetTimestamp()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Band struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.url != null) {
                oprot.writeFieldBegin(URL_FIELD_DESC);
                oprot.writeString(struct.url);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeString(struct.type);
                oprot.writeFieldEnd();
            }
            if (struct.image != null) {
                oprot.writeFieldBegin(IMAGE_FIELD_DESC);
                oprot.writeBinary(struct.image);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class BandTupleSchemeFactory implements SchemeFactory {
        public BandTupleScheme getScheme() {
            return new BandTupleScheme();
        }
    }

    private static class BandTupleScheme extends TupleScheme<Band> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Band struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI64(struct.timestamp);
            oprot.writeString(struct.name);
            oprot.writeString(struct.url);
            oprot.writeString(struct.type);
            oprot.writeBinary(struct.image);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Band struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.timestamp = iprot.readI64();
            struct.setTimestampIsSet(true);
            struct.name = iprot.readString();
            struct.setNameIsSet(true);
            struct.url = iprot.readString();
            struct.setUrlIsSet(true);
            struct.type = iprot.readString();
            struct.setTypeIsSet(true);
            struct.image = iprot.readBinary();
            struct.setImageIsSet(true);
        }
    }

}

