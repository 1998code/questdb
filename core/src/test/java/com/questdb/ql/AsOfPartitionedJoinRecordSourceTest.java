/*******************************************************************************
 *    ___                  _   ____  ____
 *   / _ \ _   _  ___  ___| |_|  _ \| __ )
 *  | | | | | | |/ _ \/ __| __| | | |  _ \
 *  | |_| | |_| |  __/\__ \ |_| |_| | |_) |
 *   \__\_\\__,_|\___||___/\__|____/|____/
 *
 * Copyright (C) 2014-2016 Appsicle
 *
 * This program is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/

package com.questdb.ql;

import com.questdb.JournalEntryWriter;
import com.questdb.JournalWriter;
import com.questdb.ex.ParserException;
import com.questdb.factory.configuration.JournalStructure;
import com.questdb.misc.Chars;
import com.questdb.misc.Dates;
import com.questdb.misc.Rnd;
import com.questdb.misc.Unsafe;
import com.questdb.ql.impl.NoRowIdRecordSource;
import com.questdb.ql.impl.join.AsOfJoinRecordSource;
import com.questdb.ql.impl.join.AsOfPartitionedJoinRecordSource;
import com.questdb.ql.parser.AbstractOptimiserTest;
import com.questdb.ql.parser.QueryError;
import com.questdb.std.CharSequenceHashSet;
import com.questdb.test.tools.TestUtils;
import com.questdb.txt.sink.StringSink;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.IOException;

public class AsOfPartitionedJoinRecordSourceTest extends AbstractOptimiserTest {

    private static final CharSequenceHashSet keys = new CharSequenceHashSet();

    @BeforeClass
    public static void setUpClass() throws Exception {

        FACTORY_CONTAINER.getFactory().getConfiguration().exists("");

        int xcount = 100;
        int ycount = 10;
        try (JournalWriter xw = FACTORY_CONTAINER.getFactory().writer(new JournalStructure("x")
                .$ts()
                .$sym("ccy")
                .$double("rate")
                .$double("amount")
                .$str("trader")
                .$sym("contra")
                .$float("fl")
                .$short("sh")
                .$long("ln")
                .$bool("b")
                .recordCountHint(xcount)
                .$()
        )) {

            try (JournalWriter yw = FACTORY_CONTAINER.getFactory().writer(new JournalStructure("y")
                    .$ts()
                    .$sym("ccy")
                    .$double("amount")
                    .$str("trader")
                    .recordCountHint(ycount)
                    .$()
            )) {

                Rnd rnd = new Rnd();

                String[] ccy = new String[3];
                for (int i = 0; i < ccy.length; i++) {
                    ccy[i] = rnd.nextChars(6).toString();
                }

                long ts = Dates.parseDateTime("2015-03-10T00:00:00.000Z");

                for (int i = 0; i < xcount; i++) {
                    JournalEntryWriter w = xw.entryWriter();
                    w.putDate(0, ts += 10000);
                    w.putSym(1, ccy[rnd.nextPositiveInt() % ccy.length]);
                    w.putDouble(2, rnd.nextDouble());
                    w.putDouble(3, rnd.nextDouble());
                    w.putStr(4, rnd.nextChars(rnd.nextPositiveInt() % 128));
                    w.putSym(5, ccy[rnd.nextPositiveInt() % ccy.length]);
                    w.putFloat(6, rnd.nextFloat());
                    w.putShort(7, (short) rnd.nextInt());
                    w.putLong(8, rnd.nextLong());
                    w.putBool(9, rnd.nextBoolean());
                    w.append();
                }
                xw.commit();

                ts = Dates.parseDateTime("2015-03-10T00:00:00.000Z");
                for (int i = 0; i < ycount; i++) {
                    JournalEntryWriter w = yw.entryWriter();
                    w.putDate(0, ts += 60000);
                    w.putSym(1, ccy[rnd.nextPositiveInt() % ccy.length]);
                    w.putDouble(2, rnd.nextDouble());
                    w.putStr(3, rnd.nextChars(rnd.nextPositiveInt() % 128));
                    w.append();
                }
                yw.commit();

                // records for adjacent join test

                try (JournalWriter jwa = FACTORY_CONTAINER.getFactory().writer(new JournalStructure("a")
                        .$ts()
                        .$sym("ccy")
                        .$double("rate")
                        .$()
                )) {

                    try (JournalWriter jwb = FACTORY_CONTAINER.getFactory().writer(new JournalStructure("b")
                            .$ts()
                            .$sym("ccy")
                            .$double("amount")
                            .$()
                    )) {

                        JournalEntryWriter ewa;

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:30:00.000Z"));
                        ewa.putSym(1, "X");
                        ewa.putDouble(2, 0.538);
                        ewa.append();

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:35:00.000Z"));
                        ewa.putSym(1, "Y");
                        ewa.putDouble(2, 1.35);
                        ewa.append();

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:37:00.000Z"));
                        ewa.putSym(1, "Y");
                        ewa.putDouble(2, 1.41);
                        ewa.append();

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:39:00.000Z"));
                        ewa.putSym(1, "X");
                        ewa.putDouble(2, 0.601);
                        ewa.append();

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:40:00.000Z"));
                        ewa.putSym(1, "Y");
                        ewa.putDouble(2, 1.26);
                        ewa.append();

                        ewa = jwa.entryWriter();
                        ewa.putDate(0, Dates.parseDateTime("2014-03-12T10:43:00.000Z"));
                        ewa.putSym(1, "Y");
                        ewa.putDouble(2, 1.29);
                        ewa.append();

                        jwa.commit();

                        JournalEntryWriter ewb;

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:27:00.000Z"));
                        ewb.putSym(1, "X");
                        ewb.putDouble(2, 1100);
                        ewb.append();

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:28:00.000Z"));
                        ewb.putSym(1, "X");
                        ewb.putDouble(2, 1200);
                        ewb.append();

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:29:00.000Z"));
                        ewb.putSym(1, "X");
                        ewb.putDouble(2, 1500);
                        ewb.append();

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:34:50.000Z"));
                        ewb.putSym(1, "Y");
                        ewb.putDouble(2, 130);
                        ewb.append();

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:36:00.000Z"));
                        ewb.putSym(1, "Y");
                        ewb.putDouble(2, 150);
                        ewb.append();

                        ewb = jwb.entryWriter();
                        ewb.putDate(0, Dates.parseDateTime("2014-03-12T10:41:00.000Z"));
                        ewb.putSym(1, "Y");
                        ewb.putDouble(2, 12000);
                        ewb.append();

                        jwb.commit();
                    }
                }
            }
        }
    }

    @Before
    public void setUp() {
        sink.clear();
    }

    @Test
    public void testAdjacentRecordJoin() throws Exception {
        assertThat("timestamp\tccy\trate\ttimestamp\tccy\tamount\n" +
                        "2014-03-12T10:30:00.000Z\tX\t0.538000000000\t2014-03-12T10:29:00.000Z\tX\t1500.000000000000\n" +
                        "2014-03-12T10:35:00.000Z\tY\t1.350000000000\t2014-03-12T10:34:50.000Z\tY\t130.000000000000\n" +
                        "2014-03-12T10:37:00.000Z\tY\t1.410000000000\t2014-03-12T10:36:00.000Z\tY\t150.000000000000\n" +
                        "2014-03-12T10:39:00.000Z\tX\t0.601000000000\t\t\tNaN\n" +
                        "2014-03-12T10:40:00.000Z\tY\t1.260000000000\t\t\tNaN\n" +
                        "2014-03-12T10:43:00.000Z\tY\t1.290000000000\t2014-03-12T10:41:00.000Z\tY\t12000.000000000000\n",
                "a asof join b on a.ccy = b.ccy", true);
    }

    @Test
    public void testAmbiguousColumn() throws Exception {
        try {
            expectFailure("select timestamp from y asof join x on x.ccy = y.ccy");
        } catch (ParserException e) {
            Assert.assertEquals(7, QueryError.getPosition());
            Assert.assertTrue(Chars.contains(QueryError.getMessage(), "Ambiguous"));
        }
    }

    @Test
    public void testAmbiguousColumnInFunc() throws Exception {
        try {
            expectFailure("select sum(timestamp) from y asof join x on x.ccy = y.ccy");
        } catch (ParserException e) {
            Assert.assertEquals(11, QueryError.getPosition());
            Assert.assertTrue(Chars.contains(QueryError.getMessage(), "Ambiguous"));
        }
    }

    @Test
    public void testAnonymousSubqueriesFunc() throws Exception {
        try {
            expectFailure("select sum(timestamp) from (y) asof join (x) on x.ccy = y.ccy");
        } catch (ParserException e) {
            Assert.assertEquals(48, QueryError.getPosition());
            TestUtils.assertEquals("Invalid journal name/alias", QueryError.getMessage());
        }
    }

    @Test
    public void testFixJoin() throws Exception {
        final String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tVTJWCP\t-5106801657083469087\t0.2093\t-20638\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tSWHYRX\t-6913510864836958686\t0.2185\t-24061\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:30.000Z\tVTJWCP\t0.000005960636\t0.000000006302\tSWHYRX\t-6595197632099589183\t0.4355\t24525\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:40.000Z\tSWHYRX\t0.000355324199\t-602.687500000000\tVTJWCP\t-1359049242368089934\t0.4722\t26075\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t\t\tNaN\tNaN\t\tNaN\tNaN\t0\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:20.000Z\tSWHYRX\t163.814239501953\t214.940444946289\tSWHYRX\t-6991567553287980963\t0.6683\t-14466\ttrue\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:10.000Z\tVTJWCP\t-168.712890625000\t0.000002090942\tVTJWCP\t7827920822553960170\t0.7780\t-15452\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:30.000Z\tSWHYRX\t28.844047546387\t329.886169433594\tPEHNRX\t3041632938449863492\t0.4069\t13732\tfalse\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t\t\tNaN\tNaN\t\tNaN\tNaN\t0\tfalse\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tPEHNRX\t-5743731661904518905\t0.9202\t-15664\ttrue\n";

        long memUsed = Unsafe.getMemUsed();
        try (AsOfPartitionedJoinRecordSource source = new AsOfPartitionedJoinRecordSource(
                compileSource("y")
                , 0
                , new NoRowIdRecordSource().of(compileSource("select timestamp, ccy, rate, amount, contra, ln, fl, sh, b from x"))
                , 0
                , keys
                , keys
                , 128
                , 128
                , 128
        )) {
            assertThat(expected, source);
        }
        Assert.assertEquals(memUsed, Unsafe.getMemUsed());
    }

    @Test
    public void testFixNonPartitionedJoin() throws Exception {
        final String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tVTJWCP\t-5106801657083469087\t0.2093\t-20638\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tSWHYRX\t-6913510864836958686\t0.2185\t-24061\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:50.000Z\tSWHYRX\t1004.000000000000\t0.000000634379\tVTJWCP\t7509515980141386401\t0.8282\t-29078\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:50.000Z\tPEHNRX\t0.000003327543\t-672.000000000000\tSWHYRX\t-3704260732528017397\t0.5809\t19302\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t2015-03-10T00:04:50.000Z\tPEHNRX\t0.549399122596\t0.947034448385\tVTJWCP\t-7006724263201963958\t0.4576\t9376\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:50.000Z\tVTJWCP\t0.000000142270\t31.476866722107\tVTJWCP\t5089854203975903209\t0.5869\t-22651\tfalse\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:50.000Z\tPEHNRX\t-1024.000000000000\t-387.792114257813\tSWHYRX\t3039241435786677811\t0.6733\t-31175\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:50.000Z\tPEHNRX\t-969.125000000000\t0.207036912441\tVTJWCP\t3768436831039810156\t0.3852\t27447\ttrue\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t2015-03-10T00:08:50.000Z\tVTJWCP\t-1024.000000000000\t0.000000084048\tSWHYRX\t-2694211234414702926\t0.4008\t-25237\ttrue\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tPEHNRX\t-5743731661904518905\t0.9202\t-15664\ttrue\n";

        long memUsed = Unsafe.getMemUsed();
        try (AsOfJoinRecordSource source = new AsOfJoinRecordSource(
                compileSource("y")
                , 0
                , new NoRowIdRecordSource().of(compileSource("select timestamp, ccy, rate, amount, contra, ln, fl, sh, b from x"))
                , 0
        )) {
            assertThat(expected, source);
        }

        Assert.assertEquals(memUsed, Unsafe.getMemUsed());
    }

    private void assertThat(String expected, RecordSource source) throws IOException {
        assertThat(expected, source, false);
    }

    @Test
    public void testNonPartitionedQuery() throws Exception {
        String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:50.000Z\tSWHYRX\t1004.000000000000\t0.000000634379\tKVHMRTGZGKCGBZDMGYDEQNNGKFDONPWUVJWXEQXILFWZSGDIRDLR\tVTJWCP\t0.8282\t-29078\t7509515980141386401\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:50.000Z\tPEHNRX\t0.000003327543\t-672.000000000000\tEVTEROCBPMCIYIXGHRQQTKOJEDNKRCGKSQDCMUMKNJGSPETBBQDSRDJWIMGPLRQUJJFG\tSWHYRX\t0.5809\t19302\t-3704260732528017397\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t2015-03-10T00:04:50.000Z\tPEHNRX\t0.549399122596\t0.947034448385\tIDLVBVKHPDGKTGGYGQQDOZFIDQTYONWECSMBPYBDSOBREXBEOLBPCCDHBEUWHTJZLOOFKUNS\tVTJWCP\t0.4576\t9376\t-7006724263201963958\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:50.000Z\tVTJWCP\t0.000000142270\t31.476866722107\tRYNQCGUFHHZMDEBQENOMIMYSPTXBOHRCOPMLLOUWWZXQELYRHBNTVVYRZOHQXZMMTQXTHFXZNSRIVWEFTCSPZRYOHCNJZGFI\tVTJWCP\t0.5869\t-22651\t5089854203975903209\tfalse\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:50.000Z\tPEHNRX\t-1024.000000000000\t-387.792114257813\tXEYNSXQEQXYDZZ\tSWHYRX\t0.6733\t-31175\t3039241435786677811\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:50.000Z\tPEHNRX\t-969.125000000000\t0.207036912441\tSUZHUEVVELXBCOGQQGZZNTEZNOOZGQPKNLKUWCXHYPNZEBESMTXULVCTMKCZJGHRIMUNWUUQHXCRSLYJFTDNSEPESIUROKI\tVTJWCP\t0.3852\t27447\t3768436831039810156\ttrue\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t2015-03-10T00:08:50.000Z\tVTJWCP\t-1024.000000000000\t0.000000084048\tJOZWRXKMTFXRYPHFPUYWNLBVVHNSJLVKRTLXHBHDHIMFYOJREFU\tSWHYRX\t0.4008\t-25237\t-2694211234414702926\ttrue\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";
        assertThat(expected, "y asof join x");
    }

    @Test
    public void testPartitionedQuery() throws Exception {
        final String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:30.000Z\tVTJWCP\t0.000005960636\t0.000000006302\tKMEKPFOYMNWDSWLUVDRHFBCZIOLYLPGZHITQJLKTRDLVSYLMSRHGKRKKUSIMYDXUUSKCXNMUREIJUHCLQCMZCCYVBDMQEHDHQHKSNGIZRPFMDVVGSVCLLERSMK\tSWHYRX\t0.4355\t24525\t-6595197632099589183\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:40.000Z\tSWHYRX\t0.000355324199\t-602.687500000000\tTFBYHSHBXOWVYUVV\tVTJWCP\t0.4722\t26075\t-1359049242368089934\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:20.000Z\tSWHYRX\t163.814239501953\t214.940444946289\tSQIIQQLRUOELSRCPUVJNSLVBETOPFWMSRNFKFZJKOJRBGMXCVFWUFLIUPNYDPZLIVLYZUBJTWBUHZSPTTXEZMFYLBVBDTCLGEJBYBSJ\tSWHYRX\t0.6683\t-14466\t-6991567553287980963\ttrue\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:10.000Z\tVTJWCP\t-168.712890625000\t0.000002090942\tFDRCUHNDUDQXFKEMPPXOCYFWMEZBPNNMZYULBZKXPTEFQGNXLFIUPZTUP\tVTJWCP\t0.7780\t-15452\t7827920822553960170\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:30.000Z\tSWHYRX\t28.844047546387\t329.886169433594\tYOPOQHKIZCCIQFUQYLJKPTDPZFOMEFUVYSMIYXIPGTDBCYCEJFPBYNORYJVMWNFXMVWRODBYSMBTZISISRZBSRBOXYTQXNZKTVOPKBXOHXYMMIFMMSWIBSLSVJ\tPEHNRX\t0.4069\t13732\t3041632938449863492\tfalse\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";
        assertThat(expected, "y asof join x on x.ccy = y.ccy");
    }

    @Test
    public void testPartitionedQuerySimplifiedJoin() throws Exception {
        final String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:30.000Z\tVTJWCP\t0.000005960636\t0.000000006302\tKMEKPFOYMNWDSWLUVDRHFBCZIOLYLPGZHITQJLKTRDLVSYLMSRHGKRKKUSIMYDXUUSKCXNMUREIJUHCLQCMZCCYVBDMQEHDHQHKSNGIZRPFMDVVGSVCLLERSMK\tSWHYRX\t0.4355\t24525\t-6595197632099589183\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:40.000Z\tSWHYRX\t0.000355324199\t-602.687500000000\tTFBYHSHBXOWVYUVV\tVTJWCP\t0.4722\t26075\t-1359049242368089934\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:20.000Z\tSWHYRX\t163.814239501953\t214.940444946289\tSQIIQQLRUOELSRCPUVJNSLVBETOPFWMSRNFKFZJKOJRBGMXCVFWUFLIUPNYDPZLIVLYZUBJTWBUHZSPTTXEZMFYLBVBDTCLGEJBYBSJ\tSWHYRX\t0.6683\t-14466\t-6991567553287980963\ttrue\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:10.000Z\tVTJWCP\t-168.712890625000\t0.000002090942\tFDRCUHNDUDQXFKEMPPXOCYFWMEZBPNNMZYULBZKXPTEFQGNXLFIUPZTUP\tVTJWCP\t0.7780\t-15452\t7827920822553960170\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:30.000Z\tSWHYRX\t28.844047546387\t329.886169433594\tYOPOQHKIZCCIQFUQYLJKPTDPZFOMEFUVYSMIYXIPGTDBCYCEJFPBYNORYJVMWNFXMVWRODBYSMBTZISISRZBSRBOXYTQXNZKTVOPKBXOHXYMMIFMMSWIBSLSVJ\tPEHNRX\t0.4069\t13732\t3041632938449863492\tfalse\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";
        assertThat(expected, "y asof join x on (ccy)");
    }

    @Test
    public void testRowidJoin() throws Exception {
        final String expected = "timestamp\tccy\tamount\ttrader\ttimestamp\tccy\trate\tamount\ttrader\tcontra\tfl\tsh\tln\tb\n" +
                "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:30.000Z\tVTJWCP\t0.000005960636\t0.000000006302\tKMEKPFOYMNWDSWLUVDRHFBCZIOLYLPGZHITQJLKTRDLVSYLMSRHGKRKKUSIMYDXUUSKCXNMUREIJUHCLQCMZCCYVBDMQEHDHQHKSNGIZRPFMDVVGSVCLLERSMK\tSWHYRX\t0.4355\t24525\t-6595197632099589183\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:40.000Z\tSWHYRX\t0.000355324199\t-602.687500000000\tTFBYHSHBXOWVYUVV\tVTJWCP\t0.4722\t26075\t-1359049242368089934\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:20.000Z\tSWHYRX\t163.814239501953\t214.940444946289\tSQIIQQLRUOELSRCPUVJNSLVBETOPFWMSRNFKFZJKOJRBGMXCVFWUFLIUPNYDPZLIVLYZUBJTWBUHZSPTTXEZMFYLBVBDTCLGEJBYBSJ\tSWHYRX\t0.6683\t-14466\t-6991567553287980963\ttrue\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:10.000Z\tVTJWCP\t-168.712890625000\t0.000002090942\tFDRCUHNDUDQXFKEMPPXOCYFWMEZBPNNMZYULBZKXPTEFQGNXLFIUPZTUP\tVTJWCP\t0.7780\t-15452\t7827920822553960170\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:30.000Z\tSWHYRX\t28.844047546387\t329.886169433594\tYOPOQHKIZCCIQFUQYLJKPTDPZFOMEFUVYSMIYXIPGTDBCYCEJFPBYNORYJVMWNFXMVWRODBYSMBTZISISRZBSRBOXYTQXNZKTVOPKBXOHXYMMIFMMSWIBSLSVJ\tPEHNRX\t0.4069\t13732\t3041632938449863492\tfalse\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";

        try (AsOfPartitionedJoinRecordSource source = new AsOfPartitionedJoinRecordSource(
                compileSource("y")
                , 0
                , compileSource("x")
                , 0
                , keys
                , keys
                , 512
                , 512
                , 512
        )) {
            assertThat(expected, source, true);
        }
    }

    @Test
    public void testRowidNonPartitioned() throws Exception {

        AsOfJoinRecordSource source = new AsOfJoinRecordSource(
                compileSource("y")
                , 0
                , compileSource("x")
                , 0
        );

        String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:50.000Z\tSWHYRX\t1004.000000000000\t0.000000634379\tKVHMRTGZGKCGBZDMGYDEQNNGKFDONPWUVJWXEQXILFWZSGDIRDLR\tVTJWCP\t0.8282\t-29078\t7509515980141386401\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:50.000Z\tPEHNRX\t0.000003327543\t-672.000000000000\tEVTEROCBPMCIYIXGHRQQTKOJEDNKRCGKSQDCMUMKNJGSPETBBQDSRDJWIMGPLRQUJJFG\tSWHYRX\t0.5809\t19302\t-3704260732528017397\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t2015-03-10T00:04:50.000Z\tPEHNRX\t0.549399122596\t0.947034448385\tIDLVBVKHPDGKTGGYGQQDOZFIDQTYONWECSMBPYBDSOBREXBEOLBPCCDHBEUWHTJZLOOFKUNS\tVTJWCP\t0.4576\t9376\t-7006724263201963958\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:50.000Z\tVTJWCP\t0.000000142270\t31.476866722107\tRYNQCGUFHHZMDEBQENOMIMYSPTXBOHRCOPMLLOUWWZXQELYRHBNTVVYRZOHQXZMMTQXTHFXZNSRIVWEFTCSPZRYOHCNJZGFI\tVTJWCP\t0.5869\t-22651\t5089854203975903209\tfalse\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:50.000Z\tPEHNRX\t-1024.000000000000\t-387.792114257813\tXEYNSXQEQXYDZZ\tSWHYRX\t0.6733\t-31175\t3039241435786677811\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:50.000Z\tPEHNRX\t-969.125000000000\t0.207036912441\tSUZHUEVVELXBCOGQQGZZNTEZNOOZGQPKNLKUWCXHYPNZEBESMTXULVCTMKCZJGHRIMUNWUUQHXCRSLYJFTDNSEPESIUROKI\tVTJWCP\t0.3852\t27447\t3768436831039810156\ttrue\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t2015-03-10T00:08:50.000Z\tVTJWCP\t-1024.000000000000\t0.000000084048\tJOZWRXKMTFXRYPHFPUYWNLBVVHNSJLVKRTLXHBHDHIMFYOJREFU\tSWHYRX\t0.4008\t-25237\t-2694211234414702926\ttrue\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";
        assertThat(expected, source);
    }

    @Test
    public void testStrings() throws Exception {
        try (AsOfPartitionedJoinRecordSource source = new AsOfPartitionedJoinRecordSource(
                compileSource("y")
                , 0
                , new NoRowIdRecordSource().of(compileSource("x"))
                , 0
                , keys
                , keys
                , 512
                , 512
                , 512
        )) {
            StringSink testSink = new StringSink();
            int idx = source.getMetadata().getColumnIndex("trader");
            RecordCursor cursor = source.prepareCursor(FACTORY_CONTAINER.getFactory());
            try {
                for (Record r : cursor) {
                    testSink.clear();
                    r.getStr(idx, testSink);

                    if (r.getFlyweightStr(idx) == null) {
                        Assert.assertTrue(testSink.length() == 0);
                    } else {
                        TestUtils.assertEquals(r.getFlyweightStr(idx), testSink);
                    }
                    TestUtils.assertEquals(r.getFlyweightStr(idx), r.getFlyweightStr(idx));
                }
            } finally {
                cursor.releaseCursor();
            }
        }
    }

    @Test
    public void testVarJoin() throws Exception {
        final String expected = "timestamp\tccy\tamount\ttrader\ttimestamp\tccy\trate\tamount\ttrader\tcontra\tfl\tsh\tln\tb\n" +
                "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:30.000Z\tVTJWCP\t0.000005960636\t0.000000006302\tKMEKPFOYMNWDSWLUVDRHFBCZIOLYLPGZHITQJLKTRDLVSYLMSRHGKRKKUSIMYDXUUSKCXNMUREIJUHCLQCMZCCYVBDMQEHDHQHKSNGIZRPFMDVVGSVCLLERSMK\tSWHYRX\t0.4355\t24525\t-6595197632099589183\tfalse\n" +
                "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:40.000Z\tSWHYRX\t0.000355324199\t-602.687500000000\tTFBYHSHBXOWVYUVV\tVTJWCP\t0.4722\t26075\t-1359049242368089934\ttrue\n" +
                "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:20.000Z\tSWHYRX\t163.814239501953\t214.940444946289\tSQIIQQLRUOELSRCPUVJNSLVBETOPFWMSRNFKFZJKOJRBGMXCVFWUFLIUPNYDPZLIVLYZUBJTWBUHZSPTTXEZMFYLBVBDTCLGEJBYBSJ\tSWHYRX\t0.6683\t-14466\t-6991567553287980963\ttrue\n" +
                "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:10.000Z\tVTJWCP\t-168.712890625000\t0.000002090942\tFDRCUHNDUDQXFKEMPPXOCYFWMEZBPNNMZYULBZKXPTEFQGNXLFIUPZTUP\tVTJWCP\t0.7780\t-15452\t7827920822553960170\tfalse\n" +
                "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:30.000Z\tSWHYRX\t28.844047546387\t329.886169433594\tYOPOQHKIZCCIQFUQYLJKPTDPZFOMEFUVYSMIYXIPGTDBCYCEJFPBYNORYJVMWNFXMVWRODBYSMBTZISISRZBSRBOXYTQXNZKTVOPKBXOHXYMMIFMMSWIBSLSVJ\tPEHNRX\t0.4069\t13732\t3041632938449863492\tfalse\n" +
                "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t\t\tNaN\tNaN\t\t\tNaN\t0\tNaN\tfalse\n" +
                "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";

        try (AsOfPartitionedJoinRecordSource source = new AsOfPartitionedJoinRecordSource(
                compileSource("y")
                , 0
                , new NoRowIdRecordSource().of(compileSource("x"))
                , 0
                , keys
                , keys
                , 512
                , 512
                , 512
        )) {
            assertThat(expected, source, true);
        }
    }

    @Test
    public void testVarNonPartitioned() throws Exception {

        try (AsOfJoinRecordSource source = new AsOfJoinRecordSource(
                compileSource("y")
                , 0
                , new NoRowIdRecordSource().of(compileSource("x"))
                , 0
        )) {

            String expected = "2015-03-10T00:01:00.000Z\tSWHYRX\t0.937527447939\tIYMQGYIYHVZMXGRFXUIUNMOQUIHPNGNOTXDHUZFW\t2015-03-10T00:00:50.000Z\tSWHYRX\t0.000039573626\t0.000003805120\tSRGOONFCLTJCKFMQNTOGMXUKLGMXSLUQDYOPHNIMYFFDTNPHFLPBNHGZWWCCNGTNLEGPUHHIUGGLNYRZLCBDMIGQZVKHTLQZ\tVTJWCP\t0.2093\t-20638\t-5106801657083469087\ttrue\n" +
                    "2015-03-10T00:02:00.000Z\tSWHYRX\t-354.250000000000\tREQIELGOYUKUTNWDLEXTVTXMGNRSVIVWEDZMVQTSYCVPGQMEYLBGSLMIBQLXNLKYSPOEXUVJHZQ\t2015-03-10T00:01:50.000Z\tSWHYRX\t832.000000000000\t0.759080171585\tEYMIWTCWLFORGFIEVMKPYVGPYKKBMQMUDDCIHCNPUGJOPJEUKWMDNZZBBUKOJSOLDYRODIPUNRPSMIFDYPDKOEZBRQSQJGDIHHNSSTCRZUPVQFULMERTPIQ\tSWHYRX\t0.2185\t-24061\t-6913510864836958686\tfalse\n" +
                    "2015-03-10T00:03:00.000Z\tVTJWCP\t0.016129214317\tQBMDSVCBRNNDKHPDGPEGWYXIVMNRTOYZSBBJSQBCEIBVNGVPPMOEQHHTNCWVRYTTYNRSW\t2015-03-10T00:02:50.000Z\tSWHYRX\t1004.000000000000\t0.000000634379\tKVHMRTGZGKCGBZDMGYDEQNNGKFDONPWUVJWXEQXILFWZSGDIRDLR\tVTJWCP\t0.8282\t-29078\t7509515980141386401\tfalse\n" +
                    "2015-03-10T00:04:00.000Z\tSWHYRX\t-502.603027343750\tPRIWBBOOYOBEXRYNHRGGBDEWWROZTQQDOGUVJHQJHNYWCXWTBBMMDBBHLPGXIIDYSTGXRGUOXFHBLMYFVFFOB\t2015-03-10T00:03:50.000Z\tPEHNRX\t0.000003327543\t-672.000000000000\tEVTEROCBPMCIYIXGHRQQTKOJEDNKRCGKSQDCMUMKNJGSPETBBQDSRDJWIMGPLRQUJJFG\tSWHYRX\t0.5809\t19302\t-3704260732528017397\ttrue\n" +
                    "2015-03-10T00:05:00.000Z\tSWHYRX\t0.219250522554\tQYDQVLYIWPQGNVZWJRSVPJMLMGICUWCLPILEQDWUEGKNHVIUZWTOUVQSBYFQNNEJHTUTCFEZMFZKNEONSLDSLQSLNVTKIGKFBSFCIGYPWDWVTRWXECKLLNKJGMGF\t2015-03-10T00:04:50.000Z\tPEHNRX\t0.549399122596\t0.947034448385\tIDLVBVKHPDGKTGGYGQQDOZFIDQTYONWECSMBPYBDSOBREXBEOLBPCCDHBEUWHTJZLOOFKUNS\tVTJWCP\t0.4576\t9376\t-7006724263201963958\tfalse\n" +
                    "2015-03-10T00:06:00.000Z\tSWHYRX\t0.000029225861\tZRYSTR\t2015-03-10T00:05:50.000Z\tVTJWCP\t0.000000142270\t31.476866722107\tRYNQCGUFHHZMDEBQENOMIMYSPTXBOHRCOPMLLOUWWZXQELYRHBNTVVYRZOHQXZMMTQXTHFXZNSRIVWEFTCSPZRYOHCNJZGFI\tVTJWCP\t0.5869\t-22651\t5089854203975903209\tfalse\n" +
                    "2015-03-10T00:07:00.000Z\tVTJWCP\t433.343750000000\tMYJGIFYQXXYMGDPKZEXYHDHKKOJNOXBRMQMPZDVYQBBWZVLJYFXSBNVNGPNLNJZLD\t2015-03-10T00:06:50.000Z\tPEHNRX\t-1024.000000000000\t-387.792114257813\tXEYNSXQEQXYDZZ\tSWHYRX\t0.6733\t-31175\t3039241435786677811\tfalse\n" +
                    "2015-03-10T00:08:00.000Z\tSWHYRX\t-810.375000000000\tPULKHMJLLKQZJIONCLBYNYYWYBEPKPNZXNYWIGPCMLCBMUPYMRIGQWSZMUMXMSYXCEEDCL\t2015-03-10T00:07:50.000Z\tPEHNRX\t-969.125000000000\t0.207036912441\tSUZHUEVVELXBCOGQQGZZNTEZNOOZGQPKNLKUWCXHYPNZEBESMTXULVCTMKCZJGHRIMUNWUUQHXCRSLYJFTDNSEPESIUROKI\tVTJWCP\t0.3852\t27447\t3768436831039810156\ttrue\n" +
                    "2015-03-10T00:09:00.000Z\tSWHYRX\t-384.000000000000\tZGUJBKNTPYXUBYXGDDULXVVSCNJINCQSDOQILSLXZEMDBLNXHYUUTVSXURFLRJLIUC\t2015-03-10T00:08:50.000Z\tVTJWCP\t-1024.000000000000\t0.000000084048\tJOZWRXKMTFXRYPHFPUYWNLBVVHNSJLVKRTLXHBHDHIMFYOJREFU\tSWHYRX\t0.4008\t-25237\t-2694211234414702926\ttrue\n" +
                    "2015-03-10T00:10:00.000Z\tVTJWCP\t384.000000000000\tPGKJRQGKHQHXYUVDUZQTICMPWFZEINPQOGHUGZGDCFLNGCEFBTDNSYQTIGUTKIESOSYYLIBUFGPWTQJQWTGERXRSYZCKPFWECEH\t2015-03-10T00:09:50.000Z\tVTJWCP\t0.062803771347\t896.000000000000\tYVJISIQFNSEUHOSVSIKJFJLNEKTSLZFPGDVCLMZTXOYEPKECCJZJOSDCIWCZECJGNWQNKCYVZJRRZYDBL\tPEHNRX\t0.9202\t-15664\t-5743731661904518905\ttrue\n";
            printer.print(source, FACTORY_CONTAINER.getFactory());
            TestUtils.assertEquals(expected, sink);
        }
    }

    static {
        keys.add("ccy");
    }
}
