/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nfsdb.journal.test.model;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TestEntity implements org.apache.thrift.TBase<TestEntity, TestEntity._Fields>, java.io.Serializable, Cloneable {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.B_STR, new org.apache.thrift.meta_data.FieldMetaData("bStr", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.A_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("aDouble", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.AN_INT, new org.apache.thrift.meta_data.FieldMetaData("anInt", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SYM, new org.apache.thrift.meta_data.FieldMetaData("sym", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.D_STR, new org.apache.thrift.meta_data.FieldMetaData("dStr", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DW_STR, new org.apache.thrift.meta_data.FieldMetaData("dwStr", org.apache.thrift.TFieldRequirementType.REQUIRED,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestEntity.class, metaDataMap);
    }

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestEntity");
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 1);
    private static final org.apache.thrift.protocol.TField B_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("bStr", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField A_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("aDouble", org.apache.thrift.protocol.TType.DOUBLE, (short) 3);
    private static final org.apache.thrift.protocol.TField AN_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("anInt", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField SYM_FIELD_DESC = new org.apache.thrift.protocol.TField("sym", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField D_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("dStr", org.apache.thrift.protocol.TType.STRING, (short) 6);
    private static final org.apache.thrift.protocol.TField DW_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("dwStr", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new TestEntityStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TestEntityTupleSchemeFactory());
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __ADOUBLE_ISSET_ID = 1;
    private static final int __ANINT_ISSET_ID = 2;
    public long timestamp; // required
    public String bStr; // required
    public double aDouble; // required
    public int anInt; // required
    public String sym; // required
    public String dStr; // required
    public String dwStr; // required
    private byte __isset_bitfield = 0;

    public TestEntity() {
    }

    public TestEntity(
            long timestamp,
            String bStr,
            double aDouble,
            int anInt,
            String sym,
            String dStr,
            String dwStr) {
        this();
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        this.bStr = bStr;
        this.aDouble = aDouble;
        setADoubleIsSet(true);
        this.anInt = anInt;
        setAnIntIsSet(true);
        this.sym = sym;
        this.dStr = dStr;
        this.dwStr = dwStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TestEntity(TestEntity other) {
        __isset_bitfield = other.__isset_bitfield;
        this.timestamp = other.timestamp;
        if (other.isSetBStr()) {
            this.bStr = other.bStr;
        }
        this.aDouble = other.aDouble;
        this.anInt = other.anInt;
        if (other.isSetSym()) {
            this.sym = other.sym;
        }
        if (other.isSetDStr()) {
            this.dStr = other.dStr;
        }
        if (other.isSetDwStr()) {
            this.dwStr = other.dwStr;
        }
    }

    public TestEntity deepCopy() {
        return new TestEntity(this);
    }

    @Override
    public void clear() {
        setTimestampIsSet(false);
        this.timestamp = 0;
        this.bStr = null;
        setADoubleIsSet(false);
        this.aDouble = 0.0;
        setAnIntIsSet(false);
        this.anInt = 0;
        this.sym = null;
        this.dStr = null;
        this.dwStr = null;
    }

    public long getTimestamp() {
        return this.timestamp;
    }

    public TestEntity setTimestamp(long timestamp) {
        this.timestamp = timestamp;
        setTimestampIsSet(true);
        return this;
    }

    public void unsetTimestamp() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /**
     * Returns true if field timestamp is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTimestamp() {
        return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public String getBStr() {
        return this.bStr;
    }

    public TestEntity setBStr(String bStr) {
        this.bStr = bStr;
        return this;
    }

    public void unsetBStr() {
        this.bStr = null;
    }

    /**
     * Returns true if field bStr is set (has been assigned a value) and false otherwise
     */
    public boolean isSetBStr() {
        return this.bStr != null;
    }

    public void setBStrIsSet(boolean value) {
        if (!value) {
            this.bStr = null;
        }
    }

    public double getADouble() {
        return this.aDouble;
    }

    public TestEntity setADouble(double aDouble) {
        this.aDouble = aDouble;
        setADoubleIsSet(true);
        return this;
    }

    public void unsetADouble() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADOUBLE_ISSET_ID);
    }

    /**
     * Returns true if field aDouble is set (has been assigned a value) and false otherwise
     */
    public boolean isSetADouble() {
        return EncodingUtils.testBit(__isset_bitfield, __ADOUBLE_ISSET_ID);
    }

    public void setADoubleIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADOUBLE_ISSET_ID, value);
    }

    public int getAnInt() {
        return this.anInt;
    }

    public TestEntity setAnInt(int anInt) {
        this.anInt = anInt;
        setAnIntIsSet(true);
        return this;
    }

    public void unsetAnInt() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANINT_ISSET_ID);
    }

    /**
     * Returns true if field anInt is set (has been assigned a value) and false otherwise
     */
    public boolean isSetAnInt() {
        return EncodingUtils.testBit(__isset_bitfield, __ANINT_ISSET_ID);
    }

    public void setAnIntIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANINT_ISSET_ID, value);
    }

    public String getSym() {
        return this.sym;
    }

    public TestEntity setSym(String sym) {
        this.sym = sym;
        return this;
    }

    public void unsetSym() {
        this.sym = null;
    }

    /**
     * Returns true if field sym is set (has been assigned a value) and false otherwise
     */
    public boolean isSetSym() {
        return this.sym != null;
    }

    public void setSymIsSet(boolean value) {
        if (!value) {
            this.sym = null;
        }
    }

    public String getDStr() {
        return this.dStr;
    }

    public TestEntity setDStr(String dStr) {
        this.dStr = dStr;
        return this;
    }

    public void unsetDStr() {
        this.dStr = null;
    }

    /**
     * Returns true if field dStr is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDStr() {
        return this.dStr != null;
    }

    public void setDStrIsSet(boolean value) {
        if (!value) {
            this.dStr = null;
        }
    }

    public String getDwStr() {
        return this.dwStr;
    }

    public TestEntity setDwStr(String dwStr) {
        this.dwStr = dwStr;
        return this;
    }

    public void unsetDwStr() {
        this.dwStr = null;
    }

    /**
     * Returns true if field dwStr is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDwStr() {
        return this.dwStr != null;
    }

    public void setDwStrIsSet(boolean value) {
        if (!value) {
            this.dwStr = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TIMESTAMP:
                if (value == null) {
                    unsetTimestamp();
                } else {
                    setTimestamp((Long) value);
                }
                break;

            case B_STR:
                if (value == null) {
                    unsetBStr();
                } else {
                    setBStr((String) value);
                }
                break;

            case A_DOUBLE:
                if (value == null) {
                    unsetADouble();
                } else {
                    setADouble((Double) value);
                }
                break;

            case AN_INT:
                if (value == null) {
                    unsetAnInt();
                } else {
                    setAnInt((Integer) value);
                }
                break;

            case SYM:
                if (value == null) {
                    unsetSym();
                } else {
                    setSym((String) value);
                }
                break;

            case D_STR:
                if (value == null) {
                    unsetDStr();
                } else {
                    setDStr((String) value);
                }
                break;

            case DW_STR:
                if (value == null) {
                    unsetDwStr();
                } else {
                    setDwStr((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TIMESTAMP:
                return Long.valueOf(getTimestamp());

            case B_STR:
                return getBStr();

            case A_DOUBLE:
                return Double.valueOf(getADouble());

            case AN_INT:
                return Integer.valueOf(getAnInt());

            case SYM:
                return getSym();

            case D_STR:
                return getDStr();

            case DW_STR:
                return getDwStr();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TIMESTAMP:
                return isSetTimestamp();
            case B_STR:
                return isSetBStr();
            case A_DOUBLE:
                return isSetADouble();
            case AN_INT:
                return isSetAnInt();
            case SYM:
                return isSetSym();
            case D_STR:
                return isSetDStr();
            case DW_STR:
                return isSetDwStr();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TestEntity)
            return this.equals((TestEntity) that);
        return false;
    }

    public boolean equals(TestEntity that) {
        if (that == null)
            return false;

        boolean this_present_timestamp = true;
        boolean that_present_timestamp = true;
        if (this_present_timestamp || that_present_timestamp) {
            if (!(this_present_timestamp && that_present_timestamp))
                return false;
            if (this.timestamp != that.timestamp)
                return false;
        }

        boolean this_present_bStr = true && this.isSetBStr();
        boolean that_present_bStr = true && that.isSetBStr();
        if (this_present_bStr || that_present_bStr) {
            if (!(this_present_bStr && that_present_bStr))
                return false;
            if (!this.bStr.equals(that.bStr))
                return false;
        }

        boolean this_present_aDouble = true;
        boolean that_present_aDouble = true;
        if (this_present_aDouble || that_present_aDouble) {
            if (!(this_present_aDouble && that_present_aDouble))
                return false;
            if (this.aDouble != that.aDouble)
                return false;
        }

        boolean this_present_anInt = true;
        boolean that_present_anInt = true;
        if (this_present_anInt || that_present_anInt) {
            if (!(this_present_anInt && that_present_anInt))
                return false;
            if (this.anInt != that.anInt)
                return false;
        }

        boolean this_present_sym = true && this.isSetSym();
        boolean that_present_sym = true && that.isSetSym();
        if (this_present_sym || that_present_sym) {
            if (!(this_present_sym && that_present_sym))
                return false;
            if (!this.sym.equals(that.sym))
                return false;
        }

        boolean this_present_dStr = true && this.isSetDStr();
        boolean that_present_dStr = true && that.isSetDStr();
        if (this_present_dStr || that_present_dStr) {
            if (!(this_present_dStr && that_present_dStr))
                return false;
            if (!this.dStr.equals(that.dStr))
                return false;
        }

        boolean this_present_dwStr = true && this.isSetDwStr();
        boolean that_present_dwStr = true && that.isSetDwStr();
        if (this_present_dwStr || that_present_dwStr) {
            if (!(this_present_dwStr && that_present_dwStr))
                return false;
            if (!this.dwStr.equals(that.dwStr))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder();

        boolean present_timestamp = true;
        builder.append(present_timestamp);
        if (present_timestamp)
            builder.append(timestamp);

        boolean present_bStr = true && (isSetBStr());
        builder.append(present_bStr);
        if (present_bStr)
            builder.append(bStr);

        boolean present_aDouble = true;
        builder.append(present_aDouble);
        if (present_aDouble)
            builder.append(aDouble);

        boolean present_anInt = true;
        builder.append(present_anInt);
        if (present_anInt)
            builder.append(anInt);

        boolean present_sym = true && (isSetSym());
        builder.append(present_sym);
        if (present_sym)
            builder.append(sym);

        boolean present_dStr = true && (isSetDStr());
        builder.append(present_dStr);
        if (present_dStr)
            builder.append(dStr);

        boolean present_dwStr = true && (isSetDwStr());
        builder.append(present_dwStr);
        if (present_dwStr)
            builder.append(dwStr);

        return builder.toHashCode();
    }

    public int compareTo(TestEntity other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        TestEntity typedOther = (TestEntity) other;

        lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimestamp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBStr()).compareTo(typedOther.isSetBStr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBStr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bStr, typedOther.bStr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetADouble()).compareTo(typedOther.isSetADouble());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetADouble()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aDouble, typedOther.aDouble);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAnInt()).compareTo(typedOther.isSetAnInt());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAnInt()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anInt, typedOther.anInt);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSym()).compareTo(typedOther.isSetSym());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSym()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sym, typedOther.sym);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDStr()).compareTo(typedOther.isSetDStr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDStr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dStr, typedOther.dStr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDwStr()).compareTo(typedOther.isSetDwStr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDwStr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwStr, typedOther.dwStr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TestEntity(");
        boolean first = true;

        sb.append("timestamp:");
        sb.append(this.timestamp);
        first = false;
        if (!first) sb.append(", ");
        sb.append("bStr:");
        if (this.bStr == null) {
            sb.append("null");
        } else {
            sb.append(this.bStr);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("aDouble:");
        sb.append(this.aDouble);
        first = false;
        if (!first) sb.append(", ");
        sb.append("anInt:");
        sb.append(this.anInt);
        first = false;
        if (!first) sb.append(", ");
        sb.append("sym:");
        if (this.sym == null) {
            sb.append("null");
        } else {
            sb.append(this.sym);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("dStr:");
        if (this.dStr == null) {
            sb.append("null");
        } else {
            sb.append(this.dStr);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("dwStr:");
        if (this.dwStr == null) {
            sb.append("null");
        } else {
            sb.append(this.dwStr);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
        if (bStr == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'bStr' was not present! Struct: " + toString());
        }
        // alas, we cannot check 'aDouble' because it's a primitive and you chose the non-beans generator.
        // alas, we cannot check 'anInt' because it's a primitive and you chose the non-beans generator.
        if (sym == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'sym' was not present! Struct: " + toString());
        }
        if (dStr == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'dStr' was not present! Struct: " + toString());
        }
        if (dwStr == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'dwStr' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        TIMESTAMP((short) 1, "timestamp"),
        B_STR((short) 2, "bStr"),
        A_DOUBLE((short) 3, "aDouble"),
        AN_INT((short) 4, "anInt"),
        SYM((short) 5, "sym"),
        D_STR((short) 6, "dStr"),
        DW_STR((short) 7, "dwStr");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TIMESTAMP
                    return TIMESTAMP;
                case 2: // B_STR
                    return B_STR;
                case 3: // A_DOUBLE
                    return A_DOUBLE;
                case 4: // AN_INT
                    return AN_INT;
                case 5: // SYM
                    return SYM;
                case 6: // D_STR
                    return D_STR;
                case 7: // DW_STR
                    return DW_STR;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }
    }

    private static class TestEntityStandardSchemeFactory implements SchemeFactory {
        public TestEntityStandardScheme getScheme() {
            return new TestEntityStandardScheme();
        }
    }

    private static class TestEntityStandardScheme extends StandardScheme<TestEntity> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TestEntity struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TIMESTAMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.timestamp = iprot.readI64();
                            struct.setTimestampIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // B_STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.bStr = iprot.readString();
                            struct.setBStrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // A_DOUBLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.aDouble = iprot.readDouble();
                            struct.setADoubleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // AN_INT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.anInt = iprot.readI32();
                            struct.setAnIntIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // SYM
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sym = iprot.readString();
                            struct.setSymIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // D_STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.dStr = iprot.readString();
                            struct.setDStrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // DW_STR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.dwStr = iprot.readString();
                            struct.setDwStrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            if (!struct.isSetTimestamp()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetADouble()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'aDouble' was not found in serialized data! Struct: " + toString());
            }
            if (!struct.isSetAnInt()) {
                throw new org.apache.thrift.protocol.TProtocolException("Required field 'anInt' was not found in serialized data! Struct: " + toString());
            }
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TestEntity struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
            oprot.writeI64(struct.timestamp);
            oprot.writeFieldEnd();
            if (struct.bStr != null) {
                oprot.writeFieldBegin(B_STR_FIELD_DESC);
                oprot.writeString(struct.bStr);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(A_DOUBLE_FIELD_DESC);
            oprot.writeDouble(struct.aDouble);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(AN_INT_FIELD_DESC);
            oprot.writeI32(struct.anInt);
            oprot.writeFieldEnd();
            if (struct.sym != null) {
                oprot.writeFieldBegin(SYM_FIELD_DESC);
                oprot.writeString(struct.sym);
                oprot.writeFieldEnd();
            }
            if (struct.dStr != null) {
                oprot.writeFieldBegin(D_STR_FIELD_DESC);
                oprot.writeString(struct.dStr);
                oprot.writeFieldEnd();
            }
            if (struct.dwStr != null) {
                oprot.writeFieldBegin(DW_STR_FIELD_DESC);
                oprot.writeString(struct.dwStr);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TestEntityTupleSchemeFactory implements SchemeFactory {
        public TestEntityTupleScheme getScheme() {
            return new TestEntityTupleScheme();
        }
    }

    private static class TestEntityTupleScheme extends TupleScheme<TestEntity> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TestEntity struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI64(struct.timestamp);
            oprot.writeString(struct.bStr);
            oprot.writeDouble(struct.aDouble);
            oprot.writeI32(struct.anInt);
            oprot.writeString(struct.sym);
            oprot.writeString(struct.dStr);
            oprot.writeString(struct.dwStr);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TestEntity struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.timestamp = iprot.readI64();
            struct.setTimestampIsSet(true);
            struct.bStr = iprot.readString();
            struct.setBStrIsSet(true);
            struct.aDouble = iprot.readDouble();
            struct.setADoubleIsSet(true);
            struct.anInt = iprot.readI32();
            struct.setAnIntIsSet(true);
            struct.sym = iprot.readString();
            struct.setSymIsSet(true);
            struct.dStr = iprot.readString();
            struct.setDStrIsSet(true);
            struct.dwStr = iprot.readString();
            struct.setDwStrIsSet(true);
        }
    }

}

