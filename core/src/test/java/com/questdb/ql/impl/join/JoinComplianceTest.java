package com.questdb.ql.impl.join;

import com.questdb.ql.impl.analytic.AbstractAnalyticRecordSourceTest;
import org.junit.Test;

public class JoinComplianceTest extends AbstractAnalyticRecordSourceTest {

    @Test
    public void testAsOfSymbolBehaviour() throws Exception {
        assertSymbol("select a.sym, b.sym from abc a asof join abc b", 0);
        assertSymbol("select a.sym, b.sym from abc a asof join abc b", 1);
    }

    @Test
    public void testCrossReset() throws Exception {
        assertThat("BZ\tBZ\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tKK\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tKK\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "XX\tBZ\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tKK\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tKK\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tKK\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tKK\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "XX\tBZ\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tXX\n" +
                "XX\tBZ\n" +
                "XX\tXX\n" +
                "XX\tKK\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "XX\tAX\n" +
                "XX\tKK\n" +
                "XX\tAX\n" +
                "XX\tBZ\n" +
                "XX\tAX\n" +
                "KK\tBZ\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tKK\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tKK\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "KK\tBZ\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tKK\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tKK\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "KK\tBZ\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tXX\n" +
                "KK\tBZ\n" +
                "KK\tXX\n" +
                "KK\tKK\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "KK\tAX\n" +
                "KK\tKK\n" +
                "KK\tAX\n" +
                "KK\tBZ\n" +
                "KK\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tXX\n" +
                "BZ\tBZ\n" +
                "BZ\tXX\n" +
                "BZ\tKK\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "BZ\tAX\n" +
                "BZ\tKK\n" +
                "BZ\tAX\n" +
                "BZ\tBZ\n" +
                "BZ\tAX\n" +
                "AX\tBZ\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tXX\n" +
                "AX\tBZ\n" +
                "AX\tXX\n" +
                "AX\tKK\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n" +
                "AX\tAX\n" +
                "AX\tKK\n" +
                "AX\tAX\n" +
                "AX\tBZ\n" +
                "AX\tAX\n", "select a.sym, b.sym from abc a cross join abc b");

    }

    @Test
    public void testCrossSymbolBehaviour() throws Exception {
        assertSymbol("select a.sym, b.sym from abc a cross join abc b", 0);
        assertSymbol("select a.sym, b.sym from abc a cross join abc b", 1);
    }
}